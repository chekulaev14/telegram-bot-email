const axios = require('axios');
const nodemailer = require('nodemailer');

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const EMAIL_FROM = process.env.EMAIL_FROM;
const EMAIL_PASSWORD = process.env.EMAIL_PASSWORD;
const EMAIL_TO = process.env.EMAIL_TO;
const SMTP_SERVER = process.env.SMTP_SERVER || 'smtp.yandex.ru';
const SMTP_PORT = parseInt(process.env.SMTP_PORT) || 587;

const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
    host: SMTP_SERVER,
    port: SMTP_PORT,
    secure: false,
    auth: {
        user: EMAIL_FROM,
        pass: EMAIL_PASSWORD
    }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId, text, keyboard = null) {
    try {
        const payload = {
            chat_id: chatId,
            text: text
        };

        if (keyboard) {
            payload.reply_markup = keyboard;
        }

        await axios.post(`${TELEGRAM_API}/sendMessage`, payload);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async function editMessage(chatId, messageId, text) {
    try {
        await axios.post(`${TELEGRAM_API}/editMessageText`, {
            chat_id: chatId,
            message_id: messageId,
            text: text
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function downloadFile(fileId) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        const fileInfoResponse = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
        const filePath = fileInfoResponse.data.result.file_path;

        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;
        const fileResponse = await axios.get(fileUrl, { responseType: 'arraybuffer' });

        return {
            buffer: fileResponse.data,
            path: filePath
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
async function sendEmail(fileBuffer, fileName, userInfo) {
    try {
        const mailOptions = {
            from: EMAIL_FROM,
            to: EMAIL_TO,
            subject: `üìé –§–∞–π–ª –∏–∑ Telegram: ${fileName}`,
            text: `–ù–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω –æ—Ç Telegram –±–æ—Ç–∞.\n\n–§–∞–π–ª: ${fileName}\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userInfo}\n\n---\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ Telegram –±–æ—Ç–æ–º`,
            attachments: [
                {
                    filename: fileName,
                    content: fileBuffer
                }
            ]
        };

        await transporter.sendMail(mailOptions);
        console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${fileName}`);
        return true;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${error.message}`);
        return false;
    }
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
exports.handler = async (event) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 200,
            body: 'OK'
        };
    }

    try {
        const update = JSON.parse(event.body);
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', JSON.stringify(update));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ "–°—Ç–∞—Ä—Ç"
        if (update.message && (update.message.text === '/start' || update.message.text === '–°—Ç–∞—Ä—Ç')) {
            const chatId = update.message.chat.id;

            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç"
            const keyboard = {
                keyboard: [
                    [{ text: 'üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª' }],
                    [{ text: '‚ÑπÔ∏è –ü–æ–º–æ—â—å' }]
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            };

            await sendMessage(chatId,
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ email.\n\n" +
                "üìé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª (PDF, PNG, JPEG), –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –Ω–∞ –ø–æ—á—Ç—É.\n\n" +
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n" +
                "‚Ä¢ PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã\n" +
                "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPEG, JPG)",
                keyboard
            );
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
        if (update.message && (update.message.text === '/help' || update.message.text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å')) {
            const chatId = update.message.chat.id;
            await sendMessage(chatId,
                "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n" +
                "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª (PDF, PNG, JPEG)\n" +
                "2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –Ω–∞ email\n" +
                "3. –ü–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ\n\n" +
                "–í—Å—ë –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ - –Ω–∞–∂–º–∏ üìé –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —Å–Ω–∏–∑—É –∏ –≤—ã–±–µ—Ä–∏ —Ñ–∞–π–ª!"
            );
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"
        if (update.message && update.message.text === 'üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª') {
            const chatId = update.message.chat.id;
            await sendMessage(chatId,
                "üìé –û—Ç–ª–∏—á–Ω–æ!\n\n" +
                "–ù–∞–∂–º–∏ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –∏ –≤—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\n\n" +
                "–Ø –ø—Ä–∏–º—É PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPEG)."
            );
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if (update.message && update.message.document) {
            const chatId = update.message.chat.id;
            const document = update.message.document;
            const fileName = document.file_name;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            const allowedExtensions = ['.pdf', '.png', '.jpg', '.jpeg'];
            const fileExt = fileName.toLowerCase().match(/\.[^.]+$/);

            if (!fileExt || !allowedExtensions.includes(fileExt[0])) {
                await sendMessage(chatId,
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n" +
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, PNG, JPEG"
                );
                return { statusCode: 200, body: 'OK' };
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            const statusResponse = await axios.post(`${TELEGRAM_API}/sendMessage`, {
                chat_id: chatId,
                text: "‚è≥ –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª..."
            });
            const statusMessageId = statusResponse.data.result.message_id;

            try {
                // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                const fileData = await downloadFile(document.file_id);

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                await editMessage(chatId, statusMessageId, "üìß –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ email...");

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const user = update.message.from;
                const userInfo = `${user.first_name || ''} ${user.last_name || ''} (@${user.username || '–±–µ–∑ username'})`.trim();

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
                const success = await sendEmail(fileData.buffer, fileName, userInfo);

                if (success) {
                    await editMessage(chatId, statusMessageId,
                        `‚úÖ –§–∞–π–ª '${fileName}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${EMAIL_TO}`
                    );
                } else {
                    await editMessage(chatId, statusMessageId,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ email. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
                    );
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
                await editMessage(chatId, statusMessageId,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞."
                );
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        if (update.message && update.message.photo) {
            const chatId = update.message.chat.id;
            const photo = update.message.photo[update.message.photo.length - 1];

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            const statusResponse = await axios.post(`${TELEGRAM_API}/sendMessage`, {
                chat_id: chatId,
                text: "‚è≥ –ü–æ–ª—É—á–∞—é —Ñ–æ—Ç–æ..."
            });
            const statusMessageId = statusResponse.data.result.message_id;

            try {
                // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                const fileData = await downloadFile(photo.file_id);
                const fileName = `photo_${photo.file_unique_id}.jpg`;

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                await editMessage(chatId, statusMessageId, "üìß –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ email...");

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const user = update.message.from;
                const userInfo = `${user.first_name || ''} ${user.last_name || ''} (@${user.username || '–±–µ–∑ username'})`.trim();

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
                const success = await sendEmail(fileData.buffer, fileName, userInfo);

                if (success) {
                    await editMessage(chatId, statusMessageId,
                        `‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${EMAIL_TO}`
                    );
                } else {
                    await editMessage(chatId, statusMessageId,
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ email. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
                    );
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
                await editMessage(chatId, statusMessageId,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ."
                );
            }
        }

        return {
            statusCode: 200,
            body: 'OK'
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        return {
            statusCode: 200,
            body: 'OK'
        };
    }
};
